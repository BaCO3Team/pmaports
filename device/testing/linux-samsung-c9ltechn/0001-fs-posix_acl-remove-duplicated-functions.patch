From 152ac70dca631028145094b5c030e7c8c0234610 Mon Sep 17 00:00:00 2001
From: Ookiineko <chiisaineko@protonmail.com>
Date: Tue, 8 Nov 2022 13:38:26 +0800
Subject: [PATCH] fs: posix_acl: remove duplicated functions

- seems to be some old unsolved (or not correctly solved) merge conflicts

Signed-off-by: Ookiineko <chiisaineko@protonmail.com>
---
 fs/posix_acl.c | 93 --------------------------------------------------
 1 file changed, 93 deletions(-)

diff --git a/fs/posix_acl.c b/fs/posix_acl.c
index e47d4fd6056..2bc32c0b30c 100644
--- a/fs/posix_acl.c
+++ b/fs/posix_acl.c
@@ -341,37 +341,6 @@ static int posix_acl_create_masq(struct posix_acl *acl, umode_t *mode_p)
         return not_equiv;
 }
 
-/**
- * posix_acl_update_mode  -  update mode in set_acl
- *
- * Update the file mode when setting an ACL: compute the new file permission
- * bits based on the ACL.  In addition, if the ACL is equivalent to the new
- * file mode, set *acl to NULL to indicate that no ACL should be set.
- *
- * As with chmod, clear the setgit bit if the caller is not in the owning group
- * or capable of CAP_FSETID (see inode_change_ok).
- *
- * Called from set_acl inode operations.
- */
-int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,
-			  struct posix_acl **acl)
-{
-	umode_t mode = inode->i_mode;
-	int error;
-
-	error = posix_acl_equiv_mode(*acl, &mode);
-	if (error < 0)
-		return error;
-	if (error == 0)
-		*acl = NULL;
-	if (!in_group_p(inode->i_gid) &&
-	    !capable_wrt_inode_uidgid(inode, CAP_FSETID))
-		mode &= ~S_ISGID;
-	*mode_p = mode;
-	return 0;
-}
-EXPORT_SYMBOL(posix_acl_update_mode);
-
 /*
  * Modify the ACL for the chmod syscall.
  */
@@ -420,37 +389,6 @@ static int posix_acl_chmod_masq(struct posix_acl *acl, umode_t mode)
 	return 0;
 }
 
-/**
- * posix_acl_update_mode  -  update mode in set_acl
- *
- * Update the file mode when setting an ACL: compute the new file permission
- * bits based on the ACL.  In addition, if the ACL is equivalent to the new
- * file mode, set *acl to NULL to indicate that no ACL should be set.
- *
- * As with chmod, clear the setgit bit if the caller is not in the owning group
- * or capable of CAP_FSETID (see inode_change_ok).
- *
- * Called from set_acl inode operations.
- */
-int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,
-                          struct posix_acl **acl)
-{
-        umode_t mode = inode->i_mode;
-        int error;
-
-        error = posix_acl_equiv_mode(*acl, &mode);
-        if (error < 0)
-                return error;
-        if (error == 0)
-                *acl = NULL;
-        if (!in_group_p(inode->i_gid) &&
-            !capable_wrt_inode_uidgid(inode, CAP_FSETID))
-                mode &= ~S_ISGID;
-        *mode_p = mode;
-        return 0;
-}
-EXPORT_SYMBOL(posix_acl_update_mode);
-
 int
 posix_acl_create(struct posix_acl **acl, gfp_t gfp, umode_t *mode_p)
 {
@@ -469,37 +407,6 @@ posix_acl_create(struct posix_acl **acl, gfp_t gfp, umode_t *mode_p)
 }
 EXPORT_SYMBOL(posix_acl_create);
 
-/**
- * posix_acl_update_mode  -  update mode in set_acl
- *
- * Update the file mode when setting an ACL: compute the new file permission
- * bits based on the ACL.  In addition, if the ACL is equivalent to the new
- * file mode, set *acl to NULL to indicate that no ACL should be set.
- *
- * As with chmod, clear the setgit bit if the caller is not in the owning group
- * or capable of CAP_FSETID (see inode_change_ok).
- *
- * Called from set_acl inode operations.
- */
-int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,
-			  struct posix_acl **acl)
-{
-	umode_t mode = inode->i_mode;
-	int error;
-
-	error = posix_acl_equiv_mode(*acl, &mode);
-	if (error < 0)
-		return error;
-	if (error == 0)
-		*acl = NULL;
-	if (!in_group_p(inode->i_gid) &&
-	    !capable_wrt_inode_uidgid(inode, CAP_FSETID))
-		mode &= ~S_ISGID;
-	*mode_p = mode;
-	return 0;
-}
-EXPORT_SYMBOL(posix_acl_update_mode);
-
 int
 posix_acl_chmod(struct posix_acl **acl, gfp_t gfp, umode_t mode)
 {
-- 
2.38.1

